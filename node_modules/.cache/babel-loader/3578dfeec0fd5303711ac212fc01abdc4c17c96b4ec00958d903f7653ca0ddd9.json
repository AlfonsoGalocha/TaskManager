{"ast":null,"code":"var _jsxFileName = \"/home/alfonso/Desktop/UCJC/a\\xF1o4/Desarrollo Multiplataforma/Practica4/guia/tasks-app/llamada-api/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Importamos la librería de supabase\nimport { createClient } from '@supabase/supabase-js';\n\n// Configuración de la conexión a Supabase\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = 'https://vwxynjysuybnegrfkpwp.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ3eHluanlzdXlibmVncmZrcHdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzIxNzg4MDYsImV4cCI6MjA0Nzc1NDgwNn0.mYKQ_0KylVtEyH8AVUYC_nkrp1Md70xRLyy6I7sZx4s';\n\n// Crear el cliente de Supabase\nconst supabase = createClient(supabaseUrl, supabaseKey);\nfunction App() {\n  _s();\n  const [data, setData] = useState([]); // Estado para guardar los datos\n  const [loading, setLoading] = useState(true); // Estado para el indicador de carga\n  const [newPost, setNewPost] = useState({\n    title: '',\n    body: ''\n  }); // Estado para el formulario\n  const [editingPost, setEditingPost] = useState(null); // Estado para saber qué post estás editando\n\n  // Función para obtener los datos de Supabase\n  const fetchData = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('prueba') // Nombre de la tabla\n    .select('*'); // Seleccionar todos los campos\n\n    if (error) {\n      console.error('Error fetching data:', error.message);\n    } else {\n      setData(data); // Guardar los datos en el estado\n    }\n    setLoading(false); // Cambiar el estado de carga cuando se obtiene la respuesta\n  };\n\n  // Función para insertar un nuevo post\n  const insertData = async e => {\n    e.preventDefault(); // Evitar que la página se recargue\n    const {\n      title,\n      body\n    } = newPost;\n    if (!title || !body) {\n      alert('Por favor, llena todos los campos');\n      return;\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('prueba') // Nombre de la tabla\n    .insert([{\n      title,\n      body\n    }]);\n    if (error) {\n      console.error('Error inserting data:', error.message);\n    } else {\n      console.log('Data inserted successfully:', data);\n      setNewPost({\n        title: '',\n        body: ''\n      }); // Limpiar el formulario\n      fetchData(); // Volver a cargar los datos\n    }\n  };\n\n  // Función para editar un post\n  const editPost = post => {\n    setEditingPost(post); // Establecer el post que estamos editando\n    setNewPost({\n      title: post.title,\n      body: post.body\n    }); // Rellenar el formulario con los datos del post\n  };\n\n  // Función para actualizar un post\n  const updatePost = async e => {\n    e.preventDefault();\n    const {\n      title,\n      body\n    } = newPost;\n    if (!title || !body) {\n      alert('Por favor, llena todos los campos');\n      return;\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('prueba') // Nombre de la tabla\n    .update({\n      title,\n      body\n    }) // Actualizar el post\n    .eq('id', editingPost.id); // Filtrar por el ID del post que estamos editando\n\n    if (error) {\n      console.error('Error updating data:', error.message);\n    } else {\n      console.log('Data updated successfully:', data);\n      setEditingPost(null); // Limpiar el estado de edición\n      setNewPost({\n        title: '',\n        body: ''\n      }); // Limpiar el formulario\n      fetchData(); // Volver a cargar los datos\n    }\n  };\n\n  // Usamos useEffect para ejecutar fetchData cuando el componente se monta\n  useEffect(() => {\n    fetchData();\n  }, []); // Solo se ejecuta una vez cuando el componente se monta\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Datos de la tabla \\\"prueba\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: editingPost ? updatePost : insertData,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"T\\xEDtulo del post\",\n          value: newPost.title,\n          onChange: e => setNewPost({\n            ...newPost,\n            title: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Contenido del post\",\n          value: newPost.body,\n          onChange: e => setNewPost({\n            ...newPost,\n            body: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: editingPost ? 'Actualizar Post' : 'Agregar Post'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cargando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: data.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"T\\xEDtulo: \", item.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Descripci\\xF3n: \", item.body]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"update\",\n              onClick: () => editPost(item),\n              children: \"Editar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 21\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No hay datos disponibles.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Tg41lJwhGhCqbUYSI+0eu33vpII=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","createClient","jsxDEV","_jsxDEV","supabaseUrl","supabaseKey","supabase","App","_s","data","setData","loading","setLoading","newPost","setNewPost","title","body","editingPost","setEditingPost","fetchData","error","from","select","console","message","insertData","e","preventDefault","alert","insert","log","editPost","post","updatePost","update","eq","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","length","map","item","onClick","_c","$RefreshReg$"],"sources":["/home/alfonso/Desktop/UCJC/año4/Desarrollo Multiplataforma/Practica4/guia/tasks-app/llamada-api/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\n// Importamos la librería de supabase\nimport { createClient } from '@supabase/supabase-js';\n\n// Configuración de la conexión a Supabase\nconst supabaseUrl = 'https://vwxynjysuybnegrfkpwp.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ3eHluanlzdXlibmVncmZrcHdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzIxNzg4MDYsImV4cCI6MjA0Nzc1NDgwNn0.mYKQ_0KylVtEyH8AVUYC_nkrp1Md70xRLyy6I7sZx4s';\n\n// Crear el cliente de Supabase\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nfunction App() {\n  const [data, setData] = useState([]);  // Estado para guardar los datos\n  const [loading, setLoading] = useState(true);  // Estado para el indicador de carga\n  const [newPost, setNewPost] = useState({ title: '', body: '' });  // Estado para el formulario\n  const [editingPost, setEditingPost] = useState(null);  // Estado para saber qué post estás editando\n\n  // Función para obtener los datos de Supabase\n  const fetchData = async () => {\n    const { data, error } = await supabase\n      .from('prueba')  // Nombre de la tabla\n      .select('*');  // Seleccionar todos los campos\n\n    if (error) {\n      console.error('Error fetching data:', error.message);\n    } else {\n      setData(data);  // Guardar los datos en el estado\n    }\n    setLoading(false);  // Cambiar el estado de carga cuando se obtiene la respuesta\n  };\n\n  // Función para insertar un nuevo post\n  const insertData = async (e) => {\n    e.preventDefault(); // Evitar que la página se recargue\n    const { title, body } = newPost;\n\n    if (!title || !body) {\n      alert('Por favor, llena todos los campos');\n      return;\n    }\n\n    const { data, error } = await supabase\n      .from('prueba')  // Nombre de la tabla\n      .insert([\n        { title, body },\n      ]);\n\n    if (error) {\n      console.error('Error inserting data:', error.message);\n    } else {\n      console.log('Data inserted successfully:', data);\n      setNewPost({ title: '', body: '' });  // Limpiar el formulario\n      fetchData();  // Volver a cargar los datos\n    }\n  };\n\n  // Función para editar un post\n  const editPost = (post) => {\n    setEditingPost(post);  // Establecer el post que estamos editando\n    setNewPost({ title: post.title, body: post.body });  // Rellenar el formulario con los datos del post\n  };\n\n  // Función para actualizar un post\n  const updatePost = async (e) => {\n    e.preventDefault();\n    const { title, body } = newPost;\n\n    if (!title || !body) {\n      alert('Por favor, llena todos los campos');\n      return;\n    }\n\n    const { data, error } = await supabase\n      .from('prueba')  // Nombre de la tabla\n      .update({ title, body })  // Actualizar el post\n      .eq('id', editingPost.id);  // Filtrar por el ID del post que estamos editando\n\n    if (error) {\n      console.error('Error updating data:', error.message);\n    } else {\n      console.log('Data updated successfully:', data);\n      setEditingPost(null);  // Limpiar el estado de edición\n      setNewPost({ title: '', body: '' });  // Limpiar el formulario\n      fetchData();  // Volver a cargar los datos\n    }\n  };\n\n  // Usamos useEffect para ejecutar fetchData cuando el componente se monta\n  useEffect(() => {\n    fetchData();\n  }, []);  // Solo se ejecuta una vez cuando el componente se monta\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Datos de la tabla \"prueba\"</h1>\n\n        {/* Formulario para insertar o actualizar un post */}\n        <form onSubmit={editingPost ? updatePost : insertData}>\n          <input\n            type=\"text\"\n            placeholder=\"Título del post\"\n            value={newPost.title}\n            onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}\n          />\n          <textarea\n            placeholder=\"Contenido del post\"\n            value={newPost.body}\n            onChange={(e) => setNewPost({ ...newPost, body: e.target.value })}\n          />\n          <button type=\"submit\">{editingPost ? 'Actualizar Post' : 'Agregar Post'}</button>\n        </form>\n\n        {/* Mostrar los posts */}\n        {loading ? (\n          <p>Cargando...</p>\n        ) : (\n          <div>\n            {data.length > 0 ? (\n              <ul>\n                {data.map((item) => (\n                  <li key={item.id}>\n                    <h2>Título: {item.title}</h2>\n                    <p>Descripción: {item.body}</p>\n                    <button className='update' onClick={() => editPost(item)}>Editar</button>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p>No hay datos disponibles.</p>\n            )}\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}