{"ast":null,"code":"var _jsxFileName = \"/home/alfonso/Desktop/UCJC/a\\xF1o4/Desarrollo Multiplataforma/Practica4/guia/tasks-app/llamada-api/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Importamos la librería de supabase\nimport { createClient } from '@supabase/supabase-js';\n\n// Configuración de la conexión a Supabase\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = 'https://vwxynjysuybnegrfkpwp.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ3eHluanlzdXlibmVncmZrcHdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzIxNzg4MDYsImV4cCI6MjA0Nzc1NDgwNn0.mYKQ_0KylVtEyH8AVUYC_nkrp1Md70xRLyy6I7sZx4s';\n\n// Crear el cliente de Supabase\nexport const supabase = createClient(supabaseUrl, supabaseKey);\nexport const testConnection = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('tasks').select('*').limit(1);\n    if (error) {\n      console.error('Error al conectar con Supabase:', error);\n    } else {\n      console.log('Conexión exitosa. Datos:', data);\n    }\n  } catch (err) {\n    console.error('Error inesperado:', err);\n  }\n};\nfunction App() {\n  _s();\n  const [data, setData] = useState([]); // Estado para guardar los datos\n  const [loading, setLoading] = useState(true); // Estado para el indicador de carga\n  const [newPost, setNewPost] = useState({\n    title: '',\n    body: ''\n  }); // Estado para el formulario\n  const [editingPost, setEditingPost] = useState(null); // Estado para saber qué post estás editando\n\n  // Función para obtener los datos de Supabase\n  const fetchData = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('prueba') // Nombre de la tabla\n    .select('*'); // Seleccionar todos los campos\n\n    if (error) {\n      console.error('Error fetching data:', error.message);\n    } else {\n      setData(data); // Guardar los datos en el estado\n    }\n    setLoading(false); // Cambiar el estado de carga cuando se obtiene la respuesta\n  };\n\n  // Función para insertar un nuevo post\n  const insertData = async e => {\n    e.preventDefault(); // Evitar que la página se recargue\n    const {\n      title,\n      body\n    } = newPost;\n    if (!title || !body) {\n      alert('Por favor, llena todos los campos');\n      return;\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('prueba') // Nombre de la tabla\n    .insert([{\n      title,\n      body\n    }]);\n    if (error) {\n      console.error('Error inserting data:', error.message);\n    } else {\n      console.log('Data inserted successfully:', data);\n      setNewPost({\n        title: '',\n        body: ''\n      }); // Limpiar el formulario\n      fetchData(); // Volver a cargar los datos\n    }\n  };\n\n  // Función para editar un post\n  const editPost = post => {\n    setEditingPost(post); // Establecer el post que estamos editando\n    setNewPost({\n      title: post.title,\n      body: post.body\n    }); // Rellenar el formulario con los datos del post\n  };\n\n  // Función para actualizar un post\n  const updatePost = async e => {\n    e.preventDefault();\n    const {\n      title,\n      body\n    } = newPost;\n    if (!title || !body) {\n      alert('Por favor, llena todos los campos');\n      return;\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('prueba') // Nombre de la tabla\n    .update({\n      title,\n      body\n    }) // Actualizar el post\n    .eq('id', editingPost.id); // Filtrar por el ID del post que estamos editando\n\n    if (error) {\n      console.error('Error updating data:', error.message);\n    } else {\n      console.log('Data updated successfully:', data);\n      setEditingPost(null); // Limpiar el estado de edición\n      setNewPost({\n        title: '',\n        body: ''\n      }); // Limpiar el formulario\n      fetchData(); // Volver a cargar los datos\n    }\n  };\n\n  // Usamos useEffect para ejecutar fetchData cuando el componente se monta\n  useEffect(() => {\n    fetchData();\n  }, []); // Solo se ejecuta una vez cuando el componente se monta\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Datos de la tabla \\\"prueba\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: editingPost ? updatePost : insertData,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"T\\xEDtulo del post\",\n          value: newPost.title,\n          onChange: e => setNewPost({\n            ...newPost,\n            title: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Contenido del post\",\n          value: newPost.body,\n          onChange: e => setNewPost({\n            ...newPost,\n            body: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: editingPost ? 'Actualizar Post' : 'Agregar Post'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cargando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: data.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"T\\xEDtulo: \", item.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Descripci\\xF3n: \", item.body]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"update\",\n              onClick: () => editPost(item),\n              children: \"Editar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 21\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No hay datos disponibles.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Tg41lJwhGhCqbUYSI+0eu33vpII=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","createClient","jsxDEV","_jsxDEV","supabaseUrl","supabaseKey","supabase","testConnection","data","error","from","select","limit","console","log","err","App","_s","setData","loading","setLoading","newPost","setNewPost","title","body","editingPost","setEditingPost","fetchData","message","insertData","e","preventDefault","alert","insert","editPost","post","updatePost","update","eq","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","length","map","item","onClick","_c","$RefreshReg$"],"sources":["/home/alfonso/Desktop/UCJC/año4/Desarrollo Multiplataforma/Practica4/guia/tasks-app/llamada-api/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\n// Importamos la librería de supabase\nimport { createClient } from '@supabase/supabase-js';\n\n// Configuración de la conexión a Supabase\nconst supabaseUrl = 'https://vwxynjysuybnegrfkpwp.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ3eHluanlzdXlibmVncmZrcHdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzIxNzg4MDYsImV4cCI6MjA0Nzc1NDgwNn0.mYKQ_0KylVtEyH8AVUYC_nkrp1Md70xRLyy6I7sZx4s';\n\n// Crear el cliente de Supabase\nexport const supabase = createClient(supabaseUrl, supabaseKey);\n\nexport const testConnection = async () => {\n  try {\n    const { data, error } = await supabase.from('tasks').select('*').limit(1);\n    if (error) {\n      console.error('Error al conectar con Supabase:', error);\n    } else {\n      console.log('Conexión exitosa. Datos:', data);\n    }\n  } catch (err) {\n    console.error('Error inesperado:', err);\n  }\n};\n\nfunction App() {\n  const [data, setData] = useState([]);  // Estado para guardar los datos\n  const [loading, setLoading] = useState(true);  // Estado para el indicador de carga\n  const [newPost, setNewPost] = useState({ title: '', body: '' });  // Estado para el formulario\n  const [editingPost, setEditingPost] = useState(null);  // Estado para saber qué post estás editando\n\n  // Función para obtener los datos de Supabase\n  const fetchData = async () => {\n    const { data, error } = await supabase\n      .from('prueba')  // Nombre de la tabla\n      .select('*');  // Seleccionar todos los campos\n\n    if (error) {\n      console.error('Error fetching data:', error.message);\n    } else {\n      setData(data);  // Guardar los datos en el estado\n    }\n    setLoading(false);  // Cambiar el estado de carga cuando se obtiene la respuesta\n  };\n\n  // Función para insertar un nuevo post\n  const insertData = async (e) => {\n    e.preventDefault(); // Evitar que la página se recargue\n    const { title, body } = newPost;\n\n    if (!title || !body) {\n      alert('Por favor, llena todos los campos');\n      return;\n    }\n\n    const { data, error } = await supabase\n      .from('prueba')  // Nombre de la tabla\n      .insert([\n        { title, body },\n      ]);\n\n    if (error) {\n      console.error('Error inserting data:', error.message);\n    } else {\n      console.log('Data inserted successfully:', data);\n      setNewPost({ title: '', body: '' });  // Limpiar el formulario\n      fetchData();  // Volver a cargar los datos\n    }\n  };\n\n  // Función para editar un post\n  const editPost = (post) => {\n    setEditingPost(post);  // Establecer el post que estamos editando\n    setNewPost({ title: post.title, body: post.body });  // Rellenar el formulario con los datos del post\n  };\n\n  // Función para actualizar un post\n  const updatePost = async (e) => {\n    e.preventDefault();\n    const { title, body } = newPost;\n\n    if (!title || !body) {\n      alert('Por favor, llena todos los campos');\n      return;\n    }\n\n    const { data, error } = await supabase\n      .from('prueba')  // Nombre de la tabla\n      .update({ title, body })  // Actualizar el post\n      .eq('id', editingPost.id);  // Filtrar por el ID del post que estamos editando\n\n    if (error) {\n      console.error('Error updating data:', error.message);\n    } else {\n      console.log('Data updated successfully:', data);\n      setEditingPost(null);  // Limpiar el estado de edición\n      setNewPost({ title: '', body: '' });  // Limpiar el formulario\n      fetchData();  // Volver a cargar los datos\n    }\n  };\n\n  // Usamos useEffect para ejecutar fetchData cuando el componente se monta\n  useEffect(() => {\n    fetchData();\n  }, []);  // Solo se ejecuta una vez cuando el componente se monta\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Datos de la tabla \"prueba\"</h1>\n\n        {/* Formulario para insertar o actualizar un post */}\n        <form onSubmit={editingPost ? updatePost : insertData}>\n          <input\n            type=\"text\"\n            placeholder=\"Título del post\"\n            value={newPost.title}\n            onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}\n          />\n          <textarea\n            placeholder=\"Contenido del post\"\n            value={newPost.body}\n            onChange={(e) => setNewPost({ ...newPost, body: e.target.value })}\n          />\n          <button type=\"submit\">{editingPost ? 'Actualizar Post' : 'Agregar Post'}</button>\n        </form>\n\n        {/* Mostrar los posts */}\n        {loading ? (\n          <p>Cargando...</p>\n        ) : (\n          <div>\n            {data.length > 0 ? (\n              <ul>\n                {data.map((item) => (\n                  <li key={item.id}>\n                    <h2>Título: {item.title}</h2>\n                    <p>Descripción: {item.body}</p>\n                    <button className='update' onClick={() => editPost(item)}>Editar</button>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p>No hay datos disponibles.</p>\n            )}\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}